#
# This file was generated by the Objective Systems ASN1C Compiler
# (https://obj-sys.com).  Version: 7.4.A, Date: 20-Nov-2019.
#
import argparse
import os
import traceback
from osyspyrt.asn1ber import Asn1BerEncodeBuffer
from osyspyrt.asn1univtype import Asn1BitString
from osyspyrt.util import hexdump
from PKCS15TokenInfo import *


class Writer:
    @staticmethod
    def main(filename, trace):
        try:
            encbuf = Asn1BerEncodeBuffer()

            # populate tokenInfo with test data
            tokenInfo = TokenInfo()
            tokenInfo.version = "v1"
            tokenInfo.serialNumber = bytes(
                [0x15, 0x97, 0x52, 0x22, 0x25, 0x15, 0x40, 0x12, 0x40])
            tokenInfo.manufacturerID = "XY, Inc."
            tokenInfo.label = "Digital signature card"
            tokenInfo.tokenflags = Asn1BitString(bytes([0x02]), 3)
            tokenInfo.seInfo = []
            tokenInfo.seInfo.append(SecurityEnvironmentInfo())
            tokenInfo.seInfo[0].se = 1
            tokenInfo.seInfo[0].owner = [1, 0, 0]
            tokenInfo.supportedAlgorithms = []
            tokenInfo.supportedAlgorithms.append(AlgorithmInfo())
            tokenInfo.supportedAlgorithms[0].reference = 1
            tokenInfo.supportedAlgorithms[0].algorithm = 1
            tokenInfo.supportedAlgorithms[0].parameters = bytes([0x05, 0x00])
            tokenInfo.supportedAlgorithms[0].supportedOperations = \
                Operations(("hash",))
            tokenInfo.supportedAlgorithms[0].algId = id_sha1

            tokenInfo.supportedAlgorithms.append(AlgorithmInfo())
            tokenInfo.supportedAlgorithms[1].reference = 2
            tokenInfo.supportedAlgorithms[1].algorithm = 2
            tokenInfo.supportedAlgorithms[1].parameters = bytes([0x05, 0x00])
            tokenInfo.supportedAlgorithms[1].supportedOperations = \
                Operations(("compute-signature",))
            tokenInfo.supportedAlgorithms[1].algId = [1, 3, 36, 3, 4, 3, 2, 1]

            tokenInfo.supportedAlgorithms.append(AlgorithmInfo())
            tokenInfo.supportedAlgorithms[2].reference = 3
            tokenInfo.supportedAlgorithms[2].algorithm = 3
            tokenInfo.supportedAlgorithms[2].parameters = bytes([0x05, 0x00])
            tokenInfo.supportedAlgorithms[2].supportedOperations = \
                Operations(("compute-checksum", "verify-checksum"))
            tokenInfo.supportedAlgorithms[2].algId = [1, 0, 0]

            tokenInfo.supportedAlgorithms.append(AlgorithmInfo())
            tokenInfo.supportedAlgorithms[3].reference = 4
            tokenInfo.supportedAlgorithms[3].algorithm = 4
            tokenInfo.supportedAlgorithms[3].parameters = \
                bytes([4, 8, 0, 0, 0, 0, 0, 0, 0, 0])
            tokenInfo.supportedAlgorithms[3].supportedOperations = \
                Operations(("encipher", "decipher"))
            tokenInfo.supportedAlgorithms[3].algId = [1, 2, 840, 113549, 3, 7]

            tokenInfo.issuerId = "wxy"
            tokenInfo.holderId = "vwx"

            if trace:
                print("The following record will be encoded:")
                tokenInfo.print_value("tokenInfo", 0)

            # Encode data and write to file
            tokenInfo.ber_encode(encbuf)
            f = open(filename, 'wb')
            f.write(encbuf.buffer())
            f.close()

            # Write hex dump to file
            hexfile = os.path.splitext(filename)[0] + '.hex'
            f = open(hexfile, 'w')
            f.write(hexdump(encbuf.buffer()))
            f.close()

            if trace:
                print(encbuf.bin_dump())

        except Exception:
            print(traceback.format_exc())


if __name__ == '__main__':
    myfilename = "message.dat"
    mytrace = True

    # Process command line arguments
    parser = argparse.ArgumentParser()

    parser.add_argument('--notrace',
                        action='store_true',
                        help='Do not display trace info')

    parser.add_argument('-o', metavar='<filename>',
                        help='Write encoded msg to <filename>')

    args = parser.parse_args()

    if args.notrace:
        mytrace = False
    if args.o:
        myfilename = args.o

    Writer.main(myfilename, mytrace)
