#
# This file was generated by the Objective Systems ASN1C Compiler
# (https://obj-sys.com).  Version: 7.4.A, Date: 17-Nov-2019.
#
import argparse
import os
import traceback
from osyspyrt.asn1ber import Asn1BerEncodeBuffer
from osyspyrt.asn1univtype import Asn1BitString, null_value
from osyspyrt.util import hexdump
from MakeCallArgument import MakeCallArgument, DeviceID, CalledDeviceID
from SimpleROSE import RosePDU, InvokePDU

class Writer:
    @staticmethod
    def main(filename, trace):
        try:
            encbuf = Asn1BerEncodeBuffer()

            makeCallArgument = MakeCallArgument()

            makeCallArgument.callingDevice = DeviceID()
            makeCallArgument.callingDevice.dialingNumber = "555-1212"

            makeCallArgument.calledDirectoryNumber = CalledDeviceID()
            makeCallArgument.calledDirectoryNumber.notRequired = null_value

            if trace:
                print("The following record will be encoded:")
                makeCallArgument.print_value("makeCallArgument", 0)

            # Encode payload data and write to file
            makeCallArgument.ber_encode(encbuf)

            # Create a ROSE Invoke PDU object to wrap the encoded call
            # argument. 
            rosePDU = RosePDU()
            rosePDU.invokePDU = InvokePDU()
            rosePDU.invokePDU.invokeID = 1
            rosePDU.invokePDU.operationValue = 10
            rosePDU.invokePDU.argument = encbuf.buffer()
            
            # Encode ROSE header
            rosePDU.ber_encode(encbuf)

            # Write result to output file
            f = open(filename, 'wb')
            f.write(encbuf.buffer())
            f.close()

            # Write hex dump to file
            hexfile = os.path.splitext(filename)[0] + '.hex'
            f = open(hexfile, 'w')
            f.write(hexdump(encbuf.buffer()))
            f.close()

            if trace:
                print(encbuf.bin_dump())

        except Exception:
            print(traceback.format_exc())


if __name__ == '__main__':
    myfilename = "message.dat"
    mytrace = True

    # Process command line arguments
    parser = argparse.ArgumentParser()

    parser.add_argument('--notrace',
                        action='store_true',
                        help='Do not display trace info')

    parser.add_argument('-o', metavar='<filename>',
                        help='Write encoded msg to <filename>')

    args = parser.parse_args()

    if args.notrace:
        mytrace = False
    if args.o:
        myfilename = args.o

    Writer.main(myfilename, mytrace)
