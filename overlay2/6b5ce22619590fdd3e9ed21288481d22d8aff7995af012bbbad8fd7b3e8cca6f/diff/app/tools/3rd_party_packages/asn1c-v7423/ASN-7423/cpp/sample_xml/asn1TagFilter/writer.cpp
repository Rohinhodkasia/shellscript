/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.1.1, Date: 04-Apr-2018.
 */
#include "Asn1TagFilter.h"
#include "rtxsrc/rtxCommon.h"
#include "rtxmlsrc/rtXmlCppMsgBuf.h"

int main (int argc, char** argv)
{
   const char* filename = "message.xml";
   int         stat, i;
   OSBOOL      trace = TRUE, verbose = FALSE, xer = FALSE;

   // Process command line arguments
   if (argc > 1) {
      for (i = 1; i < argc; i++) {
         if (!strcmp (argv[i], "-v")) verbose = TRUE;
         else if (!strcmp (argv[i], "-o")) filename = argv[++i];
         else if (!strcmp (argv[i], "-xer")) xer = TRUE;
         else if (!strcmp (argv[i], "-notrace")) trace = FALSE;
         else {
            printf ("usage: writer [ -v ] [ -o <filename>] \n");
            printf ("   -v  verbose mode: print debug info\n");
            printf ("   -o <filename>  write encoded msg to <filename>\n");
            printf ("   -xer  write XER encoding (default is Obj-Sys)\n");
            printf ("   -notrace  do not display trace info\n");
            return 1;
         }
      }
   }

   // Create an instance of the compiler generated class.
   // This example uses a dynamic message buffer..
   OSXMLEncodeBuffer encodeBuffer (0, 0);
   encodeBuffer.setDiag (verbose);
    if ( xer ) rtxCtxtSetFlag(encodeBuffer.getCtxtPtr(), OSASN1XER);
   /* PDU: Asn1TagFilter.Asn1TagFilter */
   ASN1T_Asn1TagFilter msgData;
   ASN1C_Asn1TagFilter Asn1TagFilterPDU (encodeBuffer, msgData);

   // populate msgData with test data
   ASN1T_Asn1TagPath* pTagPath = Asn1TagFilterPDU.AppendNewElement();
   pTagPath->path = OSUTF8("[U16][1]");
   pTagPath->m.typePresent = 1;
   pTagPath->type = Asn1TagPath_type::integer;

   pTagPath = Asn1TagFilterPDU.AppendNewElement();
   pTagPath->path = OSUTF8("[U16][2]");
   pTagPath->m.typePresent = 0;

   // Encode
   if ((stat = Asn1TagFilterPDU.Encode()) == 0) {
      if (trace) {
         printf ("encoded XML message:\n");
         printf ((const char*)encodeBuffer.getMsgPtr());
         printf ("\n");
      }
   }
   else {
      printf ("Encoding failed\n");
      encodeBuffer.printErrorInfo ();
      return (-1);
   }

   // Write the encoded message out to the output file
   if (encodeBuffer.write (filename) < 0) {
      printf ("Error writing XML document to file '%s'\n", filename);
      return -1;
   }
   return 0;
}
