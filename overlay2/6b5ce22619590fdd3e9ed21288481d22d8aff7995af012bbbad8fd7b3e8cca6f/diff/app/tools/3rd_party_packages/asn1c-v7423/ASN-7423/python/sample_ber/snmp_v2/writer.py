#
# This file was generated by the Objective Systems ASN1C Compiler
# (https://obj-sys.com).  Version: 7.4.A, Date: 28-Dec-2019.
#


import argparse
import os
import sys
import traceback
from osyspyrt.asn1ber import Asn1BerEncodeBuffer
from osyspyrt.util import hexdump
from SNMPv2_PDU import *
from UDP_MIB import udpLocalAddress


class Writer:
    @staticmethod
    def main(filename, trace):
        try:
            encbuf = Asn1BerEncodeBuffer()

            # Populate variable bindings structure:
            # This is a GetResponse for the UDB MIB returning the 
            # the udpLocalAddress field 

            udpLocalAddressIdx = [ 192, 180, 140, 202, 520 ]
            udpLocalAddressName = udpLocalAddress
            udpLocalAddressName += udpLocalAddressIdx

            ipAddress = bytearray([135, 180, 140, 202])

            applicationSyntax = ApplicationSyntax()
            applicationSyntax.ipAddress_value = ipAddress

            objectSyntax = ObjectSyntax()
            objectSyntax.application_wide = applicationSyntax

            udpLocalAddressValue = VarBind_aChoice()
            udpLocalAddressValue.value = objectSyntax

            varBindList = [VarBind()]
            varBindList[0].name = udpLocalAddressName
            varBindList[0].aChoice = VarBind_aChoice()
            varBindList[0].aChoice.value = udpLocalAddressValue

            # Populate get_response PDU structure

            pdus = PDUs()
            pdus.response = Response_PDU()
            pdus.response.request_id = 1827802204
            pdus.response.error_status = "noError"
            pdus.response.error_index = 0
            pdus.response.variable_bindings = varBindList

            # populate message with test data

            message = Message()
            message.version = "version-2"
            message.community = "public"
            message.data = pdus
            
            if trace:
                print("The following record will be encoded:")
                message.print_value("message", 0)

            # Encode data and write to file
            message.ber_encode(encbuf)
            f = open(filename, 'wb')
            f.write(encbuf.buffer())
            f.close()

            # Write hex dump to file
            hexfile = os.path.splitext(filename)[0] + '.hex'
            f = open(hexfile, 'w')
            f.write(hexdump(encbuf.buffer()))
            f.close()

            if trace:
                print(encbuf.bin_dump())

        except Exception:
            print(traceback.format_exc())
            sys.exit(-1)


if __name__ == '__main__':
    myfilename = "message.dat"
    mytrace = True

    # Process command line arguments
    parser = argparse.ArgumentParser()

    parser.add_argument('--notrace',
                        action='store_true',
                        help='Do not display trace info')

    parser.add_argument('-o', metavar='<filename>',
                        help='Write encoded msg to <filename>')

    args = parser.parse_args()

    if args.notrace:
        mytrace = False
    if args.o:
        myfilename = args.o

    Writer.main(myfilename, mytrace)
