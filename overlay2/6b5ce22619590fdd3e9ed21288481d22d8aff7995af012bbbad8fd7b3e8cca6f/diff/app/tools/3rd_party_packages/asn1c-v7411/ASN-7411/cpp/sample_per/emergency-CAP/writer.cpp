/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.2.B, Date: 07-May-2009.
 */
#include "CAP-1-2.h"
#include "rtxsrc/rtxCommon.h"

#include <stdio.h>
#include <stdlib.h>

int main (int argc, char** argv)
{
   const OSOCTET* msgptr;
   OSBOOL     aligned = FALSE;
   OSBOOL     trace = TRUE;
   OSBOOL     verbose = FALSE;
   FILE*      fp;
   char*      filename = "message.dat";
   int        i, stat;
   OSSIZE     len;

   /* Process Command line arguments */
   if (argc > 1) {
      for (i = 1; i < argc; i++) {
         if (!strcmp (argv[i], "-a")) aligned = TRUE;
         else if (!strcmp (argv[i], "-u")) aligned = FALSE;
         else if (!strcmp (argv[i], "-v")) verbose = TRUE;
         else if (!strcmp (argv[i], "-o")) filename = argv[++i];
         else if (!strcmp (argv[i], "-notrace")) trace = FALSE;
         else {
            printf ("usage: writer -a | -u [ -v ] [ -o <filename>\n");
            printf ("   -a  use PER aligned encoding\n");
            printf ("   -u  use PER unaligned encoding\n");
            printf ("   -v  verbose mode: print trace info\n");
            printf ("   -o <filename>  write encoded msg to <filename>\n");
            printf ("   -notrace  do not display trace info\n");
            return 1;
         }
      }
   }

   /* Create an instance of the compiler generated class.
      This example uses a dynamic message buffer..*/
   ASN1PEREncodeBuffer encodeBuffer (aligned);
   ASN1T_Alert data;
   ASN1C_Alert AlertPDU (encodeBuffer, data);

   data.identifier = OSUTF8("TRI13970876.2");
   data.sender = OSUTF8("trinet@caltech.edu");
   data.sent = "2003-06-11T20:56:00-07:00";
   data.status = AlertStatus::actual;
   data.msgType = AlertMessageType::update;
   data.scope = AlertScope::public_;

   data.m.referencesPresent = 1;
   data.references = 
      OSUTF8("trinet@caltech.edu,TRI13970876.1,2003-06-11T20:30:00-07:00");

   ASN1C_Alert_info_list infoListC (AlertPDU, data.info_list);
   ASN1T_AlertInformation* pAlertInfo = infoListC.NewElement();
   pAlertInfo->language = "en-US";

   ASN1C_AlertInformation_category_list 
      categoryListC (pAlertInfo->category_list);
   ASN1T_InformationCategory* pCategory = categoryListC.NewElement();
   *pCategory = InformationCategory::geo;
   categoryListC.Append (pCategory);

   pAlertInfo->event = OSUTF8("Earthquake");
   pAlertInfo->urgency = HowUrgent::past;
   pAlertInfo->severity = HowSevere::minor;
   pAlertInfo->certainty = HowCertain::observed;
   pAlertInfo->m.senderNamePresent = 1;
   pAlertInfo->senderName = OSUTF8("Southern California Seismic Network (TriNet) operated by Caltech and USGS");
   pAlertInfo->m.headlinePresent = 1;
   pAlertInfo->headline = OSUTF8("EQ 3.4 Imperial County CA");
   pAlertInfo->m.descriptionPresent = 1;
   pAlertInfo->description = OSUTF8("A minor earthquake measuring 3.4 on the Richter scale occurred near Brawley, California at 8:53 PM Pacific Daylight Time on Wednesday, June 11, 2003. (This event has now been reviewed by a seismologist)");
   pAlertInfo->m.webPresent = 1;
   pAlertInfo->web = OSUTF8("http://www.trinet.org/scsn/scsn.html");

   ASN1C_AlertInformation_parameter_list 
      parameterListC (pAlertInfo->parameter_list);
   ASN1T_AlertInformation_parameter* pParameter = parameterListC.NewElement();
   pParameter->valueName = OSUTF8("EventID");
   pParameter->value = OSUTF8 ("13970876");
   parameterListC.Append (pParameter);

   pParameter = parameterListC.NewElement();
   pParameter->valueName = OSUTF8("Version");
   pParameter->value = OSUTF8 ("1");
   parameterListC.Append (pParameter);

   pParameter = parameterListC.NewElement();
   pParameter->valueName = OSUTF8("Magnitude");
   pParameter->value = OSUTF8 ("3.4");
   parameterListC.Append (pParameter);

   pParameter = parameterListC.NewElement();
   pParameter->valueName = OSUTF8("Depth");
   pParameter->value = OSUTF8 ("11.8 mi.");
   parameterListC.Append (pParameter);

   pParameter = parameterListC.NewElement();
   pParameter->valueName = OSUTF8("Quality");
   pParameter->value = OSUTF8 ("Excellent");
   parameterListC.Append (pParameter);

   ASN1C_AlertInformation_area_list areaListC (pAlertInfo->area_list);
   ASN1T_Area* pArea = areaListC.NewElement();
   pArea->areaDesc = OSUTF8("1 mi. WSW of Brawley, CA; 11 mi. N of El Centro, CA; 30 mi. E of OCOTILLO (quarry); 1 mi. N of the Imperial Fault");
   ASN1C__SeqOfString circleListC (pArea->circle_list);
   circleListC.Append (OSUTF8("32.9525,-115.5527 0"));

   areaListC.Append (pArea);

   infoListC.Append (pAlertInfo);

   /* Encode */
   encodeBuffer.setTrace (trace);
   encodeBuffer.setDiag (verbose);

   if ((stat = AlertPDU.Encode ()) == 0)
   {
      if (trace) {
         printf ("Encoding was successful\n");
         printf ("Hex dump of encoded record:\n");
         encodeBuffer.hexDump ();
         printf ("Binary dump:\n");
         encodeBuffer.binDump ("Data");
      }
      msgptr = encodeBuffer.getMsgPtr ();
      len = encodeBuffer.getMsgLen ();
   }
   else
   {
      printf ("Encoding failed\n");
      encodeBuffer.printErrorInfo ();
      return (-1);
   }
   /* Write the encoded message out to the output file*/
   if ((fp = fopen (filename, "wb"))) {
      fwrite (msgptr, 1, len, fp);
      fclose (fp);
   }
   else {
      printf ("Error opening %s for write access\n", filename);
      return -1;
   }

   return 0;
}
