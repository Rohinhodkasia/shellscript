/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.3.A, Date: 11-Nov-2009.
 */
#include "CSTA-ROSE-PDU-types.h"
#include "rtxsrc/rtxCommon.h"

#include <stdio.h>
#include <stdlib.h>

int main (int argc, char** argv)
{
   const OSOCTET* msgptr;
   OSBOOL       dump = FALSE;
   OSBOOL       trace = TRUE;
   OSBOOL       verbose = FALSE;
   FILE*        fp;
   const char*  filename = "message.dat";
   int          i, len;

   /* Process Command line arguments */
   if (argc > 1) {
      for (i = 1; i < argc; i++) {
         if (!strcmp (argv[i], "-v")) verbose = TRUE;
         else if (!strcmp (argv[i], "-o")) filename = argv[++i];
         else if (!strcmp (argv[i], "-notrace")) trace = FALSE;
         else if (!strcmp (argv[i], "-dump")) dump = TRUE;
         else {
            printf ("usage: writer [ -v ] [ -o <filename>\n");
            printf ("   -v  verbose mode: print trace info\n");
            printf ("   -o <filename>  write encoded msg to <filename>\n");
            printf ("   -notrace  do not display trace info\n");
            printf ("   -dump     generate a hex dump file\n");
            return 1;
         }
      }
   }

   /* Create an instance of the compiler generated class.
      This example uses a dynamic message buffer.. */
   ASN1BEREncodeBuffer encodeBuffer (0,0);
   ASN1T_CSTA_ROSE_PDU pdu;
   ASN1C_CSTA_ROSE_PDU CSTA_ROSE_PDUPDU (encodeBuffer, pdu);

   // populate message variables with test data
   ASN1T_MakeCallArgument makeCallArgument;
   makeCallArgument.callingDevice.t = T_DeviceID_dialingNumber;
   makeCallArgument.callingDevice.u.dialingNumber = "555-1212";
   makeCallArgument.calledDirectoryNumber.t = T_CalledDeviceID_notRequired;

   ASN1T_CSTA_ROSE_PDU_invoke invoke;
   invoke.m.argumentPresent = 1;
   invoke.invokeId.t = T_InvokeId_present;
   invoke.invokeId.u.present = 1;
   invoke.opcode.t = T_Code_local;
   invoke.opcode.u.local = 10;
   invoke.argument.t = OperationSet::T_makeCall;
   invoke.argument.u.makeCall = &makeCallArgument;

   pdu.t = T_CSTA_ROSE_PDU_invoke;
   pdu.u.invoke = &invoke;

   /* Encode */
   if ((len = CSTA_ROSE_PDUPDU.Encode ()) >= 0) {
      if (trace) {
         printf ("Encoding was successful\n");
         printf ("Hex dump of encoded record:\n");
         encodeBuffer.hexDump (len);
         printf ("Binary dump:\n");
         encodeBuffer.binDump ();
      }
      msgptr = encodeBuffer.getMsgPtr ();
   }
   else {
      printf ("Encoding failed\n");
      encodeBuffer.printErrorInfo ();
      return (-1);
   }
   /* Write the encoded message out to the output file */

   if ((fp = fopen (filename, "wb"))) {
      fwrite (msgptr, 1, len, fp);
      fclose (fp);
   }
   else {
      printf ("Error opening %s for write access\n", filename);
      return -1;
   }

   /* Create a dump file */
   if (dump) {
      if ((fp = fopen ("message.dmp", "w"))) {
         rtxHexDumpToFile (fp, msgptr, len);
         fclose (fp);
      }
      else {
         printf ("Error opening message.dmp for write access\n");
         return -1;
      }
   }
   return 0;
}
