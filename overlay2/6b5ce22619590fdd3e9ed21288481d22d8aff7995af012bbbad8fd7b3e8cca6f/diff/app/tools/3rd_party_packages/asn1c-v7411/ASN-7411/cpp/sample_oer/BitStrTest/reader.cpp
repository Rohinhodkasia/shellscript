/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.A, Date: 13-Jun-2017.
 */
#include "Test.h"
#include "rtxsrc/rtxCommon.h"
#include "rtsrc/rtPrint.h"

#include <stdio.h>
#include <stdlib.h>

#define MAXREADLEN 1024

int main (int argc, char** argv)
{
   OSBOOL       verbose = FALSE;
   const char*  filename = "message.dat";
   int          i, stat;

   // Process command line arguments
   if (argc > 1) {
      for (i = 1; i < argc; i++) {
         if (!strcmp (argv[i], "-v")) verbose = TRUE;
         else if (!strcmp (argv[i], "-notrace")) {}
         else {
            printf ("usage: reader [-v]\n");
            printf ("   -v  verbose mode: print trace info\n");
            return 1;
         }
      }
   }

   ASN1OERDecodeBuffer decodeBuffer;
   decodeBuffer.setDiag (verbose);

   /* Decode example 1 */
   { 
      ASN1T_BitStr1 data;
      filename = "Example1.dat";
      ASN1C_BitStr1 BitStr1PDU (decodeBuffer, data);

      decodeBuffer.readBinaryFile (filename);
      if (decodeBuffer.getStatus() != 0) {
         printf("Error opening %s for read access\n", filename);
         decodeBuffer.printErrorInfo();
         return -1;
      }

      stat = BitStr1PDU.Decode ();
      if (stat != 0) {
         printf ("decode of data failed\n");
         decodeBuffer.PrintErrorInfo ();
         return stat;
      }

      asn1Print_BitStr1 ("Example1", &data);
   }

   /* Decode example 2 */
   { 
      ASN1T_BitStr2 data;
      filename = "Example2.dat";
      ASN1C_BitStr2 BitStr2PDU (decodeBuffer, data);

      decodeBuffer.readBinaryFile (filename);
      if (decodeBuffer.getStatus() != 0) {
         printf("Error opening %s for read access\n", filename);
         decodeBuffer.printErrorInfo();
         return -1;
      }

      stat = BitStr2PDU.Decode ();
      if (stat != 0) {
         printf ("decode of data failed\n");
         decodeBuffer.PrintErrorInfo ();
         return stat;
      }

      asn1Print_BitStr2 ("Example2", &data);
   }

   /* Decode example 3 */
   { 
      ASN1T_BitStr2 data;
      filename = "Example3.dat";
      ASN1C_BitStr2 BitStr2PDU (decodeBuffer, data);

      decodeBuffer.readBinaryFile (filename);
      if (decodeBuffer.getStatus() != 0) {
         printf("Error opening %s for read access\n", filename);
         decodeBuffer.printErrorInfo();
         return -1;
      }

      stat = BitStr2PDU.Decode ();
      if (stat != 0) {
         printf ("decode of data failed\n");
         decodeBuffer.PrintErrorInfo ();
         return stat;
      }

      asn1Print_BitStr2 ("Example3", &data);
   }

   /* Decode example 4 */
   { 
      ASN1T_BitStr2 data;
      filename = "Example4.dat";
      ASN1C_BitStr2 BitStr2PDU (decodeBuffer, data);

      decodeBuffer.readBinaryFile (filename);
      if (decodeBuffer.getStatus() != 0) {
         printf("Error opening %s for read access\n", filename);
         decodeBuffer.printErrorInfo();
         return -1;
      }

      stat = BitStr2PDU.Decode ();
      if (stat != 0) {
         printf ("decode of data failed\n");
         decodeBuffer.PrintErrorInfo ();
         return stat;
      }

      asn1Print_BitStr2 ("Example4", &data);
   }

   /* Decode example 5 */
   { 
      ASN1BitStr32 data;
      filename = "Example5.dat";
      
      OSCRTLMEMSET (&data, 0, sizeof(data));

      decodeBuffer.readBinaryFile (filename);
      if (decodeBuffer.getStatus() != 0) {
         printf("Error opening %s for read access\n", filename);
         decodeBuffer.printErrorInfo();
         return -1;
      }

      OSCTXT* pctxt = decodeBuffer.getCtxtPtr();
      stat = oerDecBitStr (pctxt, data.data, sizeof(data.data), &data.numbits);
      if (stat != 0) {
         printf ("decode of data failed\n");
         rtxErrPrint (pctxt);
         rtFreeContext (pctxt);
         return stat;
      }

      rtPrintBitStrBraceText ("Example5", data.numbits, data.data);
   }

   return 0;
}
