/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.5.A, Date: 24-Jul-2020.
 */
#include "NBAP-PDU-Descriptions.h"
#include "NBAP-Constants.h"
#include "rtxsrc/rtxCommon.h"

int main (int argc, char** argv)
{
   const char* filename = "message.txt";
   int         stat, i;
   OSBOOL      trace = TRUE, verbose = FALSE;

   // Process command line arguments
   if (argc > 1) {
      for (i = 1; i < argc; i++) {
         if (!strcmp (argv[i], "-v")) verbose = TRUE;
         else if (!strcmp (argv[i], "-o")) filename = argv[++i];
         else if (!strcmp (argv[i], "-notrace")) trace = FALSE;
         else {
            printf ("usage: writer [ -v ] [ -o <filename>] \n");
            printf ("   -v  verbose mode: print debug info\n");
            printf ("   -o <filename>  write encoded msg to <filename>\n");
            printf ("   -notrace  do not display trace info\n");
            return 1;
         }
      }
   }

   // Create an instance of the compiler generated class.
   // This example uses a dynamic message buffer..
   ASN1AVNEncodeBuffer encodeBuffer (0, 0);
   encodeBuffer.setDiag (verbose);


   // Populate RL_InformationList_RL_SetupRqstFDD_element

   ASN1T_RL_InformationList_RL_SetupRqstFDD_element rlInfoItem;
   rlInfoItem.id = ASN1V_id_RL_InformationItem_RL_SetupRqstFDD;
   rlInfoItem.criticality = Criticality::notify;
   rlInfoItem.value.rL_ID = 25;               // INTEGER (0..31)
   rlInfoItem.value.c_ID = 1000;              // INTEGER (0..65535)
   rlInfoItem.value.firstRLS_indicator = FirstRLS_Indicator::first_RLS;
   rlInfoItem.value.frameOffset = 99;         // INTEGER (0..255)
   rlInfoItem.value.chipOffset = 224;         // INTEGER (0..38399)
   rlInfoItem.value.propagationDelay = 22;    // INTEGER (0..255)
   rlInfoItem.value.m.diversityControlFieldPresent = 1;
   rlInfoItem.value.diversityControlField = DiversityControlField::must_not;

   ASN1C_DL_CodeInformationList_RL_SetupRqstFDD 
      codeInfoList (encodeBuffer, rlInfoItem.value.dl_CodeInformationList);
   ASN1T_DL_CodeInformationItem_RL_SetupRqstFDD codeInfoItem;
   codeInfoItem.dl_ScramblingCode = 0;
   codeInfoItem.fdd_DL_ChannelisationCodeNumber = 255;
   codeInfoItem.transmissionGapPatternSequenceCodeInformation = 
      TransmissionGapPatternSequenceCodeInformation::nocode_change;
   codeInfoList.Append (&codeInfoItem);

   rlInfoItem.value.initialDL_transmissionPower = -22;  // INTEGER (-350..150)
   rlInfoItem.value.maximumDL_power = 100;
   rlInfoItem.value.minimumDL_power = -100;

   // Populate RadioLinkSetupRequestFDD_protocolIEs_element

   ASN1T_RL_InformationList_RL_SetupRqstFDD rlInfoList;
   ASN1C_RL_InformationList_RL_SetupRqstFDD 
      rlInfoListC (encodeBuffer, rlInfoList);

   rlInfoListC.Append (&rlInfoItem);

   ASN1T_RadioLinkSetupRequestFDD_protocolIEs_element protocolIE_1;
   protocolIE_1.id = ASN1V_id_RL_InformationList_RL_SetupRqstFDD;
   protocolIE_1.criticality = Criticality::notify;
   protocolIE_1.value.t = RadioLinkSetupRequestFDD_IEs::
      T_id_RL_InformationList_RL_SetupRqstFDD;
   protocolIE_1.value.u.
      _RadioLinkSetupRequestFDD_IEs_id_RL_InformationList_RL_SetupRqstFDD = 
      &rlInfoList;

   // Populate RadioLinkSetupRequestFDD structure

   ASN1T_RadioLinkSetupRequestFDD rlSetupRequestFDD;
   ASN1C_RadioLinkSetupRequestFDD_protocolIEs
      rlSetupRequestFDDC (encodeBuffer, rlSetupRequestFDD.protocolIEs);
   rlSetupRequestFDDC.Append (&protocolIE_1);

   // Populate NBAP-PDU structure

   ASN1T_InitiatingMessage initMsg;
   initMsg.procedureID.procedureCode = ASN1V_id_radioLinkSetup;
   initMsg.procedureID.ddMode = ProcedureID_ddMode::fdd;
   initMsg.criticality = Criticality::reject;
   initMsg.messageDiscriminator = MessageDiscriminator::common;
   initMsg.transactionID.t = T_TransactionID_shortTransActionId;
   initMsg.transactionID.u.shortTransActionId = 1;
   initMsg.value.t = NBAP_ELEMENTARY_PROCEDURES::T_radioLinkSetupFDD;
   initMsg.value.u.radioLinkSetupFDD = &rlSetupRequestFDD;

   ASN1T_NBAP_PDU pduData;
   ASN1C_NBAP_PDU pdu (encodeBuffer, pduData);
   pduData.t = T_NBAP_PDU_initiatingMessage;
   pduData.u.initiatingMessage = &initMsg;
   
   // Encode
   if ((stat = pdu.Encode()) == 0) {
      // Write the encoded message out to the output file
      if (encodeBuffer.write (filename) < 0) {
         printf ("Error writing ASN.1 Value Notation document to file '%s'\n", filename);
         return -1;
      }

      encodeBuffer.nullTerminate();
      if (trace) {
         printf ("encoded AVN message:\n");
         printf ((const char*)encodeBuffer.getMsgPtr());
         printf ("\n");
      }
   }
   else {
      printf ("Encoding failed\n");
      encodeBuffer.printErrorInfo ();
      return (-1);
   }

   return 0;
}
