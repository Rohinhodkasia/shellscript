#
# This file was generated by the Objective Systems ASN1C Compiler
# (https://obj-sys.com).  Version: 7.4.A, Date: 20-Nov-2019.
#
import argparse
import os
import traceback
from osyspyrt.asn1ber import Asn1BerEncodeBuffer
from osyspyrt.util import hexdump
from ACSE_1 import *
from Asn1External import *


class Writer:
    @staticmethod
    def main(filename, trace):
        try:
            encbuf = Asn1BerEncodeBuffer()

            # Populate a message object for an AARQ message for the Philips
            # Sopho PBX device.
            aarq_apdu = AARQ_apdu()
            aarq_apdu.aSO_context_name = [1, 3, 12, 0, 180, 1]

            # The message includes an OBJECT IDENTIFIER that has one value
            # if the PBX is being used in test mode and a different value if
            # it's being used in production mode.  We will use production
            # mode here; set the testmode value to True to use the test mode
            # identifier.
            subids_testmode_on = [1, 3, 6, 1, 4, 1, 1417, 1, 7, 203875582]
            subids_testmode_off = [1, 3, 6, 1, 4, 1, 1417, 1, 7, 239210381]
            testmode = False
            ap_title = AP_title()
            if testmode:
                ap_title.ap_title_form2 = subids_testmode_on
            else:
                ap_title.ap_title_form2 = subids_testmode_off
            aarq_apdu.calling_AP_title = ap_title

            # There are a couple vendor-specific blobs for which we don't
            # have the ASN.1.
            vs_testmode_on = bytearray(
                [0x30, 0x0F, 0xC0, 0x09, 0x30, 0x07, 0xC0, 0x01,
                 0x00, 0xC1, 0x02, 0x00, 0x3C, 0xC1, 0x02, 0x00, 0x01])

            vs_testmode_off = bytearray(
                [0x30, 0x0B, 0xC0, 0x09, 0x30, 0x07, 0xC0, 0x01,
                 0x00, 0xC1, 0x02, 0x00, 0x05])

            if testmode:
                ui = vs_testmode_on
            else:
                ui = vs_testmode_off
            aarq_apdu.user_information = ui
            ext = External()
            ext_enc = External_encoding()
            ext_enc.single_ASN1_type = ui
            ext.encoding = ext_enc
            aarq_apdu.user_information = [ext]

            acse_apdu = ACSE_apdu()
            acse_apdu.aarq = aarq_apdu

            if trace:
                print("The following record will be encoded:")
                acse_apdu.print_value("acse_apdu", 0)

            # Encode data and write to file
            acse_apdu.ber_encode(encbuf)
            f = open(filename, 'wb')
            f.write(encbuf.buffer())
            f.close()

            # Write hex dump to file
            hexfile = os.path.splitext(filename)[0] + '.hex'
            f = open(hexfile, 'w')
            f.write(hexdump(encbuf.buffer()))
            f.close()

            if trace:
                print(encbuf.bin_dump())

        except Exception:
            print(traceback.format_exc())


if __name__ == '__main__':
    myfilename = "message.dat"
    mytrace = True

    # Process command line arguments
    parser = argparse.ArgumentParser()

    parser.add_argument('--notrace',
                        action='store_true',
                        help='Do not display trace info')

    parser.add_argument('-o', metavar='<filename>',
                        help='Write encoded msg to <filename>')

    args = parser.parse_args()

    if args.notrace:
        mytrace = False
    if args.o:
        myfilename = args.o

    Writer.main(myfilename, mytrace)
