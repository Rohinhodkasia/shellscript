/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.3.B, Date: 04-Jan-2019.
 */
#include "TCI-Dispatcher.h"
#include "rtxsrc/rtxCommon.h"
#include "rtxsrc/rtxDiagBitTrace.h"

#include <stdio.h>
#include <stdlib.h>
#include "rtPrintStream.h" 

void writeToStdout(void* pPrntStrmInfo, const char* fmtspec, va_list arglist) {
   vprintf(fmtspec, arglist);
   return;
}

#define MAXREADLEN 1024

int main (int argc, char** argv)
{
   OSBOOL       trace = TRUE, verbose = FALSE;
   const char*  filename = "message.dat";
   int          i, stat;

   // Process command line arguments
   if (argc > 1) {
      for (i = 1; i < argc; i++) {
         if (!strcmp (argv[i], "-v")) verbose = TRUE;
         else if (!strcmp (argv[i], "-i")) filename = argv[++i];
         else if (!strcmp (argv[i], "-notrace")) trace = FALSE;
         else {
            printf ("usage: reader [-v] [-i <filename>] [-notrace]\n");
            printf ("   -v  verbose mode: print trace info\n");
            printf ("   -i <filename>  read encoded msg from <filename>\n");
            printf ("   -notrace  do not display trace info\n");
            return 1;
         }
      }
   }

   ASN1OERDecodeBuffer decodeBuffer;
   ASN1T_TCIMsg data;
   ASN1C_TCIMsg TCIMsgPDU (decodeBuffer, data);
   decodeBuffer.setDiag (verbose);
   decodeBuffer.readBinaryFile (filename);
   if (decodeBuffer.getStatus() != 0) {
      printf("Error opening %s for read access\n", filename);
      decodeBuffer.printErrorInfo();
      return -1;
   }
   TCIMsgPDU.setPrintStream(&writeToStdout, (void*)0);
   stat = TCIMsgPDU.Decode ();
   if (stat != 0) {
      printf ("decode of PersonnelRecord failed\n");
      decodeBuffer.PrintErrorInfo ();
      return stat;
   }

   if (trace) {
      printf ("Decode of data was successful\n");
      printf ("Decoded record:\n");
      TCIMsgPDU.Print ("TCIMsg");
   }
   return 0;
}
