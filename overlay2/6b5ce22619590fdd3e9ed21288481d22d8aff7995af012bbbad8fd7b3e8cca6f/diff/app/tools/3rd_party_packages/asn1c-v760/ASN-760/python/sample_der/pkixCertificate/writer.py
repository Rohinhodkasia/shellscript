#
# This file was generated by the Objective Systems ASN1C Compiler
# (https://obj-sys.com).  Version: 7.4.A, Date: 24-Nov-2019.
#


import argparse
import os
import traceback
from osyspyrt.asn1ber import Asn1BerEncodeBuffer
from osyspyrt.asn1univtype import Asn1BitString, null_value
from osyspyrt.util import hexdump
from PKIXAlgs_2009 import rsaEncryption
from PKIX1Explicit_2009 import *
from PKIX1Implicit_2009 import id_ce_basicConstraints, BasicConstraints


class Writer:
    subjectPublicKeyValue = bytes([
        0x30, 0x81, 0xC9, 0x02, 0x81, 0xC1, 0x00, 0xF2, 0x93, 0x35, 0x62,
        0x9E, 0x5B, 0x5F, 0x53, 0xCB, 0xCF, 0x27, 0x6D, 0x6A, 0x30, 0xD9,
        0x9B, 0xE7, 0x92, 0xD4, 0x6E, 0xB3, 0x52, 0x20, 0x1A, 0x25, 0x50,
        0xFB, 0x4F, 0x61, 0x92, 0x2B, 0xA7, 0x9E, 0x9C, 0x67, 0xD2, 0xED,
        0x1F, 0x54, 0x88, 0xC6, 0xC2, 0xAE, 0x82, 0x76, 0xF1, 0xBF, 0x44,
        0xE1, 0x06, 0xE0, 0xB2, 0xAC, 0x93, 0x28, 0x11, 0xDF, 0xF3, 0xC2,
        0xB2, 0x65, 0x3A, 0xB6, 0x77, 0x9E, 0x06, 0x0C, 0x50, 0xC8, 0x1A,
        0x3E, 0x33, 0xA1, 0x37, 0x73, 0x72, 0xAE, 0x48, 0xC9, 0x45, 0x36,
        0xA6, 0xF0, 0xC7, 0x2F, 0xB3, 0xE6, 0x32, 0xC6, 0xEB, 0xF7, 0x8E,
        0x2F, 0x56, 0x91, 0x38, 0x0D, 0x4C, 0xCD, 0x10, 0x31, 0xFD, 0xC3,
        0xF8, 0x86, 0x3E, 0xBD, 0x83, 0x22, 0xAD, 0x4A, 0x6E, 0x44, 0x59,
        0xA9, 0x8C, 0x74, 0x21, 0x63, 0x76, 0xB3, 0x07, 0x11, 0x3B, 0x9C,
        0x30, 0x83, 0xF0, 0x68, 0x61, 0x7E, 0x8B, 0xA3, 0xFC, 0x1B, 0x5F,
        0x59, 0x6E, 0x38, 0xEA, 0x6B, 0x6A, 0xDB, 0x7B, 0xC4, 0x76, 0xBA,
        0x55, 0xE3, 0xD9, 0xD5, 0x7B, 0xA8, 0x06, 0xCB, 0x23, 0xCA, 0x0F,
        0xD6, 0x81, 0xFA, 0xF0, 0xB5, 0x70, 0xD6, 0x06, 0xB3, 0x2E, 0x20,
        0xB8, 0xC0, 0xCA, 0xA5, 0x99, 0x08, 0xE0, 0xC6, 0x1A, 0xDB, 0x4D,
        0x95, 0xBB, 0x8D, 0x61, 0x97, 0xE4, 0x3F, 0x56, 0xEA, 0x83, 0xEE,
        0x75, 0x02, 0x03, 0x01, 0x00, 0x01])

    uniqueIDValue = bytes([
        0x78, 0x75, 0xC4, 0x61, 0x75, 0x51, 0x11, 0xD0, 0x92, 0x43, 0x08,
        0x00, 0x09, 0x7A, 0x2E, 0x97])

    certSignatureValue = bytes([
        0x30, 0x81, 0xB6, 0xBD, 0x6C, 0xC8, 0xF9, 0xF6, 0xD8, 0x37, 0xBB,
        0xD5, 0x9B, 0x94, 0xA3, 0xA5, 0xCF, 0x74, 0xC9, 0xA1, 0xFE, 0x4D,
        0x90, 0xA0, 0xB4, 0x6F, 0x4E, 0x42, 0xAC, 0x1D, 0x84, 0x6D, 0xE9,
        0x87, 0xF9, 0x56, 0x08, 0xD8, 0x5E, 0xCB, 0xF0, 0x71, 0xA7, 0xC9,
        0x57, 0x32, 0x8A, 0x31, 0x86, 0xF5, 0x34, 0xA5, 0xD2, 0x6A, 0xC4,
        0xA0, 0x80, 0x8B, 0xCE, 0xF3, 0x7F, 0x9C, 0x96, 0xB1, 0x34, 0x66,
        0xC5, 0x41, 0x03, 0xD8, 0x6B, 0x76, 0xB9, 0x33, 0x41, 0x17, 0x6F,
        0xAE, 0x3F, 0xB8, 0x4A, 0x83, 0xC8, 0x16, 0xE5, 0xCC, 0x9A, 0x4B,
        0x2A, 0x56, 0x86, 0xD9, 0x95, 0xC6, 0xF2, 0x3D, 0xE2, 0x8F, 0x64,
        0x8C, 0xF1, 0xDE, 0x61, 0x7F, 0xDE, 0xCB, 0x95, 0x50, 0x80, 0xC3,
        0x4B, 0x0E, 0xF8, 0x7F, 0x1E, 0x45, 0xC6, 0xFE, 0x4F, 0x16, 0x98,
        0x25, 0x24, 0x59, 0x9D, 0x9A, 0xCD, 0xB6, 0xE0, 0xFD, 0xFE, 0x9B,
        0x37, 0x04, 0xB4, 0x7B, 0x58, 0x3D, 0x41, 0x94, 0x9B, 0x1B, 0x89,
        0x61, 0x18, 0x4B, 0x3C, 0x75, 0xF0, 0x16, 0x4B, 0xC6, 0xE1, 0x46,
        0xC2, 0x3A, 0x75, 0xDE, 0x09, 0x0C, 0x32, 0x92, 0x66, 0x79, 0x90,
        0x4F, 0x11, 0xD7, 0xFB, 0xB8, 0xBB, 0x7C, 0x43, 0xC5, 0xA8, 0xC8,
        0xBD, 0xD7, 0x42, 0x59, 0x5A, 0x54, 0xC0, 0xA2, 0xA9, 0x39, 0xB2,
        0xB5, 0x9D, 0x63, 0x65, 0xD8])
    
    @staticmethod
    def set_test_authority():
        rdn1 = [RelativeDistinguishedName_element()]
        rdn2 = [RelativeDistinguishedName_element()]
        rdn3 = [RelativeDistinguishedName_element()]

        rdn1[0].type = id_at_countryName
        rdn1[0].value = "CA"

        rdn2[0].type = id_at_organizationName
        rdn2[0].value = \
            RelativeDistinguishedName_element_value_at_x520OrganizationName()
        rdn2[0].value.printableString = "Bovine Ballistics, Inc"

        rdn3[0].type = id_at_commonName
        rdn3[0].value = X520CommonName()
        rdn3[0].value.printableString = "Test Security Authority"

        return [rdn1, rdn2, rdn3]

    @staticmethod
    def main(filename, trace):
        try:
            encbuf = Asn1BerEncodeBuffer()

            certificate = Certificate()

            # populate certificate with test data
            certificate.toBeSigned = TBSCertificate()
            certificate.toBeSigned.version = 2
            certificate.toBeSigned.serialNumber = \
                160118841221132149945952828414366461591
            certificate.toBeSigned.signature = TBSCertificate_signature()
            certificate.toBeSigned.signature.algorithm = rsaEncryption
            certificate.toBeSigned.signature.parameters = bytes([0x05, 0x00])
            certificate.toBeSigned.issuer = Name()
            certificate.toBeSigned.issuer.rdnSequence = Writer.set_test_authority()
            certificate.toBeSigned.validity = Validity()
            certificate.toBeSigned.validity.notBefore = Time()
            certificate.toBeSigned.validity.notBefore.utcTime = "970123050000Z"
            certificate.toBeSigned.validity.notAfter = Time()
            certificate.toBeSigned.validity.notAfter.utcTime = "010123045959Z"
            certificate.toBeSigned.subject = Name()
            certificate.toBeSigned.subject.rdnSequence = Writer.set_test_authority()
            certificate.toBeSigned.subjectPublicKeyInfo = SubjectPublicKeyInfo()
            certificate.toBeSigned.subjectPublicKeyInfo.algorithm = \
                SubjectPublicKeyInfo_algorithm()
            certificate.toBeSigned.subjectPublicKeyInfo.algorithm.algorithm = \
                rsaEncryption
            certificate.toBeSigned.subjectPublicKeyInfo.algorithm.parameters = \
                null_value
            certificate.toBeSigned.subjectPublicKeyInfo.subjectPublicKey = \
                Asn1BitString(Writer.subjectPublicKeyValue, 1632)
            certificate.toBeSigned.issuerUniqueID = \
                Asn1BitString(Writer.uniqueIDValue, 128)
            certificate.toBeSigned.subjectUniqueID = \
                Asn1BitString(Writer.uniqueIDValue, 128)
            certificate.toBeSigned.extensions = \
                [TBSCertificate_extensions_element()]
            certificate.toBeSigned.extensions[0].extnID = id_ce_basicConstraints
            certificate.toBeSigned.extensions[0].critical = True
            certificate.toBeSigned.extensions[0].extnValue = BasicConstraints()
            certificate.toBeSigned.extensions[0].extnValue.cA = True
            certificate.toBeSigned.extensions[0].extnValue.pathLenConstraint = 255
            certificate.algorithm = Certificate_algorithm()
            certificate.algorithm.algorithm = rsaEncryption
            certificate.algorithm.parameters = bytes([0x05, 0x00])
            certificate.signature = Asn1BitString(Writer.certSignatureValue, 1536)

            if trace:
                print("The following record will be encoded:")
                certificate.print_value("certificate", 0)

            # Encode data and write to file
            certificate.ber_encode(encbuf)
            f = open(filename, 'wb')
            f.write(encbuf.buffer())
            f.close()

            # Write hex dump to file
            hexfile = os.path.splitext(filename)[0] + '.hex'
            f = open(hexfile, 'w')
            f.write(hexdump(encbuf.buffer()))
            f.close()

            if trace:
                print(encbuf.bin_dump())

        except Exception:
            print(traceback.format_exc())


if __name__ == '__main__':
    myfilename = "message.dat"
    mytrace = True

    # Process command line arguments
    parser = argparse.ArgumentParser()

    parser.add_argument('--notrace',
                        action='store_true',
                        help='Do not display trace info')

    parser.add_argument('-o', metavar='<filename>',
                        help='Write encoded msg to <filename>')

    args = parser.parse_args()

    if args.notrace:
        mytrace = False
    if args.o:
        myfilename = args.o

    Writer.main(myfilename, mytrace)
