#
# This file was generated by the Objective Systems ASN1C Compiler
# (https://obj-sys.com).  Version: 7.4.A, Date: 28-Dec-2019.
#


import argparse
import os
import sys
import traceback
from osyspyrt.asn1ber import Asn1BerEncodeBuffer
from osyspyrt.asn1univtype import null_value
from osyspyrt.util import hexdump
from RFC1157_SNMP import *
from RFC1213_MIB import sysDescr


class Writer:
    @staticmethod
    def main(filename, trace):
        try:
            encbuf = Asn1BerEncodeBuffer()

            message = Message()

            # populate message with test data
            simpleSyntax = SimpleSyntax()
            simpleSyntax.empty = null_value

            objectSyntax = ObjectSyntax()
            objectSyntax.simple = simpleSyntax

            message.version = "version-1"
            message.community = "public"
            message.data = PDUs()
            message.data.get_request = GetRequest_PDU()
            message.data.get_request.request_id = 1
            message.data.get_request.error_status = "noError"
            message.data.get_request.error_index = 0
            message.data.get_request.variable_bindings = [VarBind()]
            message.data.get_request.variable_bindings[0].name = sysDescr
            message.data.get_request.variable_bindings[0].name.append(0)
            message.data.get_request.variable_bindings[0].value = objectSyntax

            if trace:
                print("The following record will be encoded:")
                message.print_value("message", 0)

            # Encode data and write to file
            message.ber_encode(encbuf)
            f = open(filename, 'wb')
            f.write(encbuf.buffer())
            f.close()

            # Write hex dump to file
            hexfile = os.path.splitext(filename)[0] + '.hex'
            f = open(hexfile, 'w')
            f.write(hexdump(encbuf.buffer()))
            f.close()

            if trace:
                print(encbuf.bin_dump())

        except Exception:
            print(traceback.format_exc())
            sys.exit(-1)


if __name__ == '__main__':
    myfilename = "message.dat"
    mytrace = True

    # Process command line arguments
    parser = argparse.ArgumentParser()

    parser.add_argument('--notrace',
                        action='store_true',
                        help='Do not display trace info')

    parser.add_argument('-o', metavar='<filename>',
                        help='Write encoded msg to <filename>')

    args = parser.parse_args()

    if args.notrace:
        mytrace = False
    if args.o:
        myfilename = args.o

    Writer.main(myfilename, mytrace)
