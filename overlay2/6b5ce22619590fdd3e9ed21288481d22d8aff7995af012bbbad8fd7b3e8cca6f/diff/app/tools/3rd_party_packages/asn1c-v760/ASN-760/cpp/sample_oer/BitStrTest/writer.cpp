/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.A, Date: 13-Jun-2017.
 */
#include "Test.h"
#include "rtxsrc/rtxCommon.h"

#include <stdio.h>
#include <stdlib.h>
#include "rtxsrc/rtxFile.h"
#include "rtxsrc/rtxPrint.h"

static int processResult (ASN1OEREncodeBuffer encodeBuffer, int stat, const char* filename)
{
   const OSOCTET* msgptr = encodeBuffer.getMsgPtr();
   size_t len = encodeBuffer.getMsgLen();

   printf ("Hex dump of encoded record:\n");
   rtxHexDump (msgptr, len);

   if (stat < 0) {
      printf ("Encoding failed\n");
      rtxErrPrint (encodeBuffer.getCtxtPtr());
      return stat;
   }
   
   /* Write the encoded message out to the output file */
   stat = rtxFileWriteBinary (filename, msgptr, len);
   if (stat < 0) {
      printf ("Write to file failed\n");
      encodeBuffer.printErrorInfo();
      return stat;
   }

   return stat;
}

int main (int argc, char** argv)
{
   int        i, stat;
   OSBOOL     trace = TRUE;
   OSBOOL     verbose = FALSE;
   const char* filename = "message.dat";

   /* Process command line arguments */
   if (argc > 1) {
      for (i = 1; i < argc; i++) {
         if (!strcmp (argv[i], "-v")) verbose = TRUE;
         else if (!strcmp (argv[i], "-notrace")) {}
         else {
            printf ("usage: writer [-v]\n");
            printf ("   -v  verbose mode: print trace info\n");
            return 1;
         }
      }
   }

   /* Create an instance of the compiler generated class.
      This example uses a dynamic message buffer..*/
   ASN1OEREncodeBuffer encodeBuffer;

   /* Examples from OER spec */
   /* Example 1 */
   {     
      ASN1T_BitStr1 data;
      ASN1C_BitStr1 BitStr1PDU (encodeBuffer, data);

      data.numbits = 12;
      memset (data.data, 0, sizeof(data.data));
      rtxSetBit (data.data, 12, 3);

      encodeBuffer.init();
      stat = BitStr1PDU.Encode();
      stat = processResult (encodeBuffer, stat, "Example1.dat");
   }

   /* Example 2 */
   if (stat >= 0) {
      ASN1T_BitStr2 data;
      ASN1C_BitStr2 BitStr2PDU (encodeBuffer, data);
      data.numbits = 20;
      memset (data.data, 0, sizeof(data.data));
      rtxSetBit (data.data, 32, 3);

      encodeBuffer.init();
      stat = BitStr2PDU.Encode();
      stat = processResult (encodeBuffer, stat, "Example2.dat");
   }

   /* Example 3 */
   if (stat >= 0) {
      ASN1T_BitStr2 data;
      ASN1C_BitStr2 BitStr2PDU (encodeBuffer, data);
      data.numbits = 14;
      memset (data.data, 0, sizeof(data.data));
      rtxSetBit (data.data, 32, 3);

      encodeBuffer.init();
      stat = BitStr2PDU.Encode();
      stat = processResult (encodeBuffer, stat, "Example3.dat");
   }

   /* Example 4 */
   if (stat >= 0) {
      ASN1T_BitStr2 data;
      ASN1C_BitStr2 BitStr2PDU (encodeBuffer, data);
      data.numbits = 14;
      memset (data.data, 0, sizeof(data.data));
      rtxSetBit (data.data, 32, 13);

      encodeBuffer.init();
      stat = BitStr2PDU.Encode();
      stat = processResult (encodeBuffer, stat, "Example4.dat");
   }

   /* Example 5 */
   if (stat >= 0) {
      ASN1BitStr32 data;
      data.numbits = 20;
      memset (data.data, 0, sizeof(data.data));
      rtxSetBit (data.data, 32, 3);

      encodeBuffer.init();
      stat = oerEncBitStr (encodeBuffer.getCtxtPtr(), data.data, data.numbits);
      stat = processResult (encodeBuffer, stat, "Example5.dat");
   }

   return stat;
}
