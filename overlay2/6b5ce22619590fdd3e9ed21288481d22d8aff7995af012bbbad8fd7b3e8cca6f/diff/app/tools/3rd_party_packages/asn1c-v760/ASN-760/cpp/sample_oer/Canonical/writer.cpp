/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.A, Date: 13-Jun-2017.
 */
#include "Canonical.h"
#include "rtxsrc/rtxCommon.h"
#include "rtxsrc/rtxDiagBitTrace.h"

#include <stdio.h>
#include <stdlib.h>
#include "rtxsrc/rtxFile.h"
#include "rtxsrc/rtxPrint.h"

int main (int argc, char** argv)
{
   int        i, stat;
   OSSIZE     len;
   OSBOOL     trace = TRUE;
   OSBOOL     verbose = FALSE;
   const char* filename = "message.dat";
   const OSOCTET* msgptr;

   /* Process command line arguments */
   if (argc > 1) {
      for (i = 1; i < argc; i++) {
         if (!strcmp (argv[i], "-v")) verbose = TRUE;
         else if (!strcmp (argv[i], "-o")) filename = argv[++i];
         else if (!strcmp (argv[i], "-notrace")) trace = FALSE;
         else {
            printf ("usage: writer [-v] [-o <filename>]  [-notrace]\n");
            printf ("   -v  verbose mode: print trace info\n");
            printf ("   -o <filename>  write encoded msg to <filename>\n");
            printf ("   -notrace  do not display trace info\n");
            return 1;
         }
      }
   }

   /* Create an instance of the compiler generated class.
      This example uses a dynamic message buffer..*/
   ASN1OEREncodeBuffer encodeBuffer;
   OSCTXT* pctxt = encodeBuffer.getCtxtPtr();
   ASN1T_PDU data;
   ASN1C_PDU PDUPDU (encodeBuffer, data);

   ASN1T_PDU* pdata = &data;

   /* should not be encoded */
   pdata->valueWithDefault = "okay";

   /* should be encoded as 14 bits */
   pdata->bitStringNamedRange.numbits = 18;
   pdata->bitStringNamedRange.data[0] = 0x63;
   pdata->bitStringNamedRange.data[1] = 0x64;
   pdata->bitStringNamedRange.data[2] = 0x00;

   {
      ASN1C_PDU_seqOfOctStrings list(encodeBuffer, pdata->seqOfOctStrings);
      
      ASN1TDynOctStr* poctstr;
           
      poctstr = list.AppendNewElement();
      poctstr->numocts = 4;
      poctstr->data = (OSOCTET*) rtxMemAlloc (pctxt, 4);
      {
         static const OSOCTET testdata[] = {
         0x12, 0x34, 0x56, 0x78
         };
         OSCRTLSAFEMEMCPY ((void*)poctstr->data, 4, testdata, 4);
      }      

      poctstr = list.AppendNewElement();
      poctstr->numocts = 2;
      poctstr->data = (OSOCTET*) rtxMemAlloc (pctxt, 2);
      {
         static const OSOCTET testdata[] = {
         0xab, 0xcd };
         OSCRTLSAFEMEMCPY ((void*)poctstr->data, 2, testdata, 2);
      }

      poctstr = list.AppendNewElement();
      poctstr->numocts = 3;
      poctstr->data = (OSOCTET*) rtxMemAlloc (pctxt, 3);
      {
         static const OSOCTET testdata[] = {
         0x45, 0x67, 0x89 };
         OSCRTLSAFEMEMCPY ((void*)poctstr->data, 3, testdata, 3);
      }

      poctstr = list.AppendNewElement();
      poctstr->numocts = 2;
      poctstr->data = (OSOCTET*) rtxMemAlloc (pctxt, 2);
      {
         static const OSOCTET testdata[] = {
         0x41, 0x67 };
         OSCRTLSAFEMEMCPY ((void*)poctstr->data, 2, testdata, 2);
      }
   }

   {
      ASN1C_PDU_setOfOctStrings list(encodeBuffer, pdata->setOfOctStrings);
      
      ASN1TDynOctStr* poctstr;

      poctstr = list.AppendNewElement();
      poctstr->numocts = 4;
      poctstr->data = (OSOCTET*) rtxMemAlloc (pctxt, 4);
      {
         static const OSOCTET testdata[] = {
         0x12, 0x34, 0x56, 0x78
         };
         OSCRTLSAFEMEMCPY ((void*)poctstr->data, 4, testdata, 4);
      }

      poctstr = list.AppendNewElement();
      poctstr->numocts = 2;
      poctstr->data = (OSOCTET*) rtxMemAlloc (pctxt, 2);
      {
         static const OSOCTET testdata[] = {
         0xab, 0xcd };
         OSCRTLSAFEMEMCPY ((void*)poctstr->data, 2, testdata, 2);
      }

      poctstr = list.AppendNewElement();
      poctstr->numocts = 3;
      poctstr->data = (OSOCTET*) rtxMemAlloc (pctxt, 3);
      {
         static const OSOCTET testdata[] = {
         0x45, 0x67, 0x89 };
         OSCRTLSAFEMEMCPY ((void*)poctstr->data, 3, testdata, 3);
      }

      poctstr = list.AppendNewElement();
      poctstr->numocts = 2;
      poctstr->data = (OSOCTET*) rtxMemAlloc (pctxt, 2);
      {
         static const OSOCTET testdata[] = {
         0x41, 0x67 };
         OSCRTLSAFEMEMCPY ((void*)poctstr->data, 2, testdata, 2);
      }
   }

   pdata->generalizedTime = "19861127100756.314Z";

   pdata->utcTime = "050128100020Z";

   pdata->trueOrFalse = 5;    /* should be encoded as 0xFF */
   pdata->unsignedint = 3452816845;
   pdata->signedint = -842150451;
   pdata->animal = PDU_animal::cow;
   pdata->color = PDU_color::white;

   /* Encode */

   if ((stat = PDUPDU.Encode ()) == 0)
   {
      if (trace) {
         printf ("Encoding was successful\n");
         printf ("Hex dump of encoded record:\n");
         encodeBuffer.hexDump ();
      }
      msgptr = encodeBuffer.getMsgPtr ();
      len = encodeBuffer.getMsgLen ();
   }
   else
   {
      printf ("Encoding failed\n");
      encodeBuffer.printErrorInfo ();
      return (-1);
   }
   /* Write the encoded message out to the output file */
   stat = rtxFileWriteBinary (filename, msgptr, len);
   if (stat < 0) {
      printf ("Write to file failed\n");
      encodeBuffer.printErrorInfo();
      return stat;
   }

   return 0;
}
